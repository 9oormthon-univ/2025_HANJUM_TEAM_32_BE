name: Deploy to AWS EC2

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      # 1. 소스코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # 2. JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      # 3. Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 4. GitHub Actions에서 프로젝트 빌드 (테스트 제외)
      - name: Build with Gradle
        run: ./gradlew build -x test

      # 5. 빌드된 JAR 파일 EC2로 전송
      - name: Deploy JAR to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ubuntu
          key: ${{ secrets.AWS_PEM_KEY }}
          source: "build/libs/*.jar"
          target: "/home/ubuntu/2025_HANJUM_TEAM_32_BE"

      # 6. EC2에서 애플리케이션 실행 (기존 프로세스 종료 후 nohup 실행)
      - name: Run Application on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ubuntu
          key: ${{ secrets.AWS_PEM_KEY }}
          script: |
            cd /home/ubuntu/2025_HANJUM_TEAM_32_BE

            # 환경설정 파일 덮어쓰기
            echo "${{ secrets.APPLICATION_PROD_YML }}" > src/main/resources/application-prod.yml
            echo "${{ secrets.APPLICATION_YML }}" > src/main/resources/application.yml
            echo "${{ secrets.APPLICATION_SWAGGER_YML }}" > src/main/resources/application-swagger.yml
            echo "${{ secrets.APPLICATION_S3_YML }}" > src/main/resources/application-s3.yml
            echo "${{ secrets.APPLICATION_LOCAL_YML }}" > src/main/resources/application-local.yml

            # 기존 애플리케이션 종료 (포트 8080 충돌 방지)
            pgrep -f '*.jar' | xargs -r kill -9

            # 애플리케이션 백그라운드 실행
            nohup java -Xmx512m -jar *.jar --spring.profiles.active=prod > app.log 2>&1 &
