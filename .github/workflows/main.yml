# 워크플로우의 이름
name: Deploy to AWS EC2

# 실행될 조건: main 브랜치에 push 이벤트가 발생했을 때
on:
  push:
    branches: [ "main" ]

# 실행될 작업(Job) 목록
jobs:
  deploy:
    # 실행 환경: 최신 버전의 우분투
    runs-on: ubuntu-latest
    
    # 작업 단계(Step) 목록
    steps:
      # 1. 소스코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # 2. JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      # 3. Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 4. Gradle로 프로젝트 빌드 (GitHub Actions 컴퓨터에서 실행)
      - name: Build with Gradle
        run: ./gradlew build -x test

      # 5. 빌드된 .jar 파일을 EC2 서버로 전송 (SCP 사용)
      - name: Deploy to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ubuntu
          key: ${{ secrets.AWS_PEM_KEY }}
          source: "build/libs/*.jar" # 빌드된 jar 파일
          target: "/home/ubuntu/2025_HANJUM_TEAM_32_BE" # EC2 서버의 프로젝트 폴더

      # 6. EC2 서버에 접속해서 애플리케이션 실행 (SSH 사용)
      - name: Run Application on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ubuntu
          key: ${{ secrets.AWS_PEM_KEY }}
          script: |
            cd /home/ubuntu/2025_HANJUM_TEAM_32_BE
            # 기존에 실행 중이던 서버 프로세스를 종료
            pgrep -f '.jar' | xargs -r kill -9
            # 새로 받은 jar 파일로 서버를 백그라운드에서 실행 (메모리 제한 포함)
            nohup java -Xmx512m -jar *.jar &
